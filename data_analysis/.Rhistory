B0_sex     <- mxMatrix( type="Full", nrow=1, ncol=ntv, free=TRUE, values=svb0, labels=c("b0","b0"), name="b0sex" )
B1_sex     <- mxMatrix( type="Full", nrow=1, ncol=ntv, free=TRUE, values=svb1, labels=c("b1","b1"), name="b1sex" )
B1_age     <- mxMatrix( type="Full", nrow=1, ncol=ntv, free=TRUE, values=svb1, labels=c("b2","b2"), name="b1age" )
#
Sex <- mxMatrix(type="Full", nrow=1, ncol=ntv, free=FALSE, labels=c('data.sex1','data.sex2'),name="sex")
Age <- mxMatrix(type="Full", nrow=1, ncol=ntv, free=FALSE, labels=c('data.agem71','data.agem72'),name="age")
#
ExpMean <- mxAlgebra(expression=b0sex+b1sex*sex+b1age*age, name='expMean')
#ACE model
# Create Matrices for covariance matrices mz and dz
corMZ     <- mxMatrix( type="Stand", nrow=ntv, ncol=ntv, free=TRUE, values=c(svrmz), label="rmz", name="Rmz" )
sdMZ      <- mxMatrix( type="Diag", nrow=ntv, ncol=ntv, free=TRUE, values=c(svsd,svsd), label=c("sdmz1","sdmz2"), name="Sdmz" )
expCovMZ  <- mxAlgebra( expression= Sdmz%*%Rmz%*%t(Sdmz), name="expCovMZ" )
#
# Create Matrices for Variance Components
corDZ      <- mxMatrix( type="Stand", nrow=ntv, ncol=ntv, free=TRUE, values=c(svrdz), label="rdz", name="Rdz" )
sdDZ      <- mxMatrix( type="Diag", nrow=ntv, ncol=ntv, free=TRUE, values=c(svsd,svsd), label=c("sddz1","sddz2"), name="Sddz" )
expCovDZ  <- mxAlgebra( expression= Sddz%*%Rdz%*%t(Sddz), name="expCovDZ" )
# Create Data Objects for Multiple Groups
#ACE model
dataMZ    <- mxData( observed=data_W7_7_MZ, type="raw")
dataDZ    <- mxData( observed=data_W7_7_DZ, type="raw")
#ACE model
# Create Expectation Objects for Multiple Groups
expMZ     <- mxExpectationNormal( covariance="expCovMZ", means="expMean", dimnames=selVars )
expDZ     <- mxExpectationNormal( covariance="expCovDZ", means="expMean", dimnames=selVars )
funML     <- mxFitFunctionML()
pars      <- list(B0_sex, B1_sex, B1_age)
modelMZ   <- mxModel( pars, corMZ, sdMZ, ExpMean,  Sex, Age, expCovMZ, ExpMean, dataMZ, expMZ, funML, name="MZ" )
modelDZ   <- mxModel( pars, corDZ, sdDZ, ExpMean,  Sex, Age, expCovDZ, ExpMean, dataDZ, expDZ, funML, name="DZ" )
multi     <- mxFitFunctionMultigroup( c("MZ","DZ") )
#ACE model
# Create Algebra for Variance Components
# Build Model with Confidence Intervals
modelSAT  <- mxModel(name="SAT", pars, modelMZ, modelDZ, multi)
#SATurated model
# ----------------------------------------------------------------------------------------------------------------------#
#
# Run ACDE Model
fitSAT    <- mxRun(modelSAT)
sumSAT    <- summary(fitSAT)
#
# correlations and stdevs
#
fitSAT$MZ$Rmz$values
fitSAT$MZ$Sdmz$values
fitSAT$DZ$Rdz$values
fitSAT$DZ$Sddz$values
get_table_from_fitSAT(fitSAT)
#
#
# ### 'inattcm71 2')
# ### 'sex', 'agem71 2')
# ADE model with sex and age as covariates phenotye + prs
# ----------------------------------------------------------------------------------------------------------------------
selVars = c("inattcm71","zprs1","inattcm72","zprs2")  # the array with the variable names
tmpSm = corFiml(data_W7_7_MZ[,selVars[1:2]], covar = TRUE)$cov
tmpSd = corFiml(data_W7_7_DZ[,selVars[1:2]], covar = TRUE)$cov
tmpS=(tmpSm+tmpSd)/2
tmpm = mean ( apply(data_W7_7_MZ[,selVars[c(1,3)]],2,mean, na.rm=T) )
# PREPARE MODEL
dA=diag(sqrt(c(.3,1)))
svVA=dA%*%tmpS%*%dA
dD=diag(sqrt(c(.3,0)))
svVD=dD%*%tmpS%*%dD   # NO D
dE=diag(sqrt(c(.4,0)))
svVE=dE%*%tmpS%*%dE
svb0=c(tmpm,0)
svb1=c(.0,.0) # sex
svb2=c(.0,.0) # age
#
#
nv=2
# Create regression model for expected Mean Matrices
#
B0_     <- mxMatrix( type="Full", nrow=1, ncol=ntv, free=TRUE, values=svb0, labels=c("b0ph","b0prs"), name="b0_" )
B1_sex     <- mxMatrix( type="Full", nrow=1, ncol=nv, free=c(T,F), values=svb1, labels=c("b1ph","b1prs"), name="b1sex" )
B1_age     <- mxMatrix( type="Full", nrow=1, ncol=nv, free=c(T,F), values=svb2, labels=c("b2ph","b2prs"), name="b1age" )
#
Sex1 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.sex1','data.sex1'),name="sex1")
Age1 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.agem71','data.agem71'),name="age1")
Sex2 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.sex2','data.sex2'),name="sex2")
Age2 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.agem72','data.agem72'),name="age2")
#
ExpMeanDZ <- mxAlgebra(expression=cbind(b0_ + b1sex*sex1 + b1age*age1, b0_ + b1sex*sex2 + b1age*age2), name='expMeanDZ')
ExpMeanMZ <- mxAlgebra(expression=cbind(b0_ + b1sex*sex1 + b1age*age1, b0_ + b1sex*sex2 + b1age*age2)[1,1:3], name='expMeanMZ')
#
#ADE model
#
#ADE model
# Create Matrices for Variance Components
covA      <- mxMatrix( type="Symm", nrow=nv, ncol=nv, free=c(T,T,T), values=svVA, label=c("VA11","VA21","VA22"), name="VA" )
covD      <- mxMatrix( type="Symm", nrow=nv, ncol=nv, free=c(T,F,F), values=svVD, label=c("VD11","VD21","VD22"), name="VD" )
covE      <- mxMatrix( type="Symm", nrow=nv, ncol=nv, free=c(T,F,F), values=svVE, label=c("VE11","VE21","VE22"), name="VE" )
#
#ACE model
# Create Algebra for expected Variance/Covariance Matrices in MZ & DZ twins
covP      <- mxAlgebra( expression= VA+VD+VE, name="V" )
covMZ     <- mxAlgebra( expression= VA+VD, name="cMZ" )
covDZ     <- mxAlgebra( expression= 0.5%x%VA+.25%x%VD, name="cDZ" )
expCovMZ  <- mxAlgebra( expression= rbind( cbind(V, cMZ), cbind(t(cMZ), V))[1:3,1:3], name="expCovMZ" )
expCovDZ  <- mxAlgebra( expression= rbind( cbind(V, cDZ), cbind(t(cDZ), V)), name="expCovDZ" )
#ACDE model
# Create Data Objects for Multiple Groups
#ACDE model
dataMZ    <- mxData( observed=data_W7_7_MZ, type="raw" )
dataDZ    <- mxData( observed=data_W7_7_DZ, type="raw" )
#ACDE model
# Create Expectation Objects for Multiple Groups
expMZ     <- mxExpectationNormal( covariance="expCovMZ", means="expMeanMZ", dimnames=selVars[c(1,2,3)] )
expDZ     <- mxExpectationNormal( covariance="expCovDZ", means="expMeanDZ", dimnames=selVars )
funML     <- mxFitFunctionML()
#ACDE model
pars      <- list(B0_, B1_age, B1_sex, covA, covD, covE, covP )
modelMZ   <- mxModel( pars, ExpMeanMZ,  Sex1, Sex2, Age1, Age2, covMZ, expCovMZ, dataMZ, expMZ, funML, name="MZ" )
modelDZ   <- mxModel( pars, ExpMeanDZ,  Sex1, Sex2, Age1, Age2, covDZ, expCovDZ, dataDZ, expDZ, funML, name="DZ" )
multi     <- mxFitFunctionMultigroup( c("MZ","DZ") )
#ACE model
# Build Model with Confidence Intervals
modelADE2  <- mxModel(name='ADE', pars, modelMZ, modelDZ, multi) #  dataMZ, dataDZ, multi)
#ACDE model
# ----------------------------------------------------------------------------------------------------------------------
# RUN MODEL
# conor
# Run ACDE Model
# fitAE2    <- mxTryHard( modelAE2, 20)
fitADE2    <- mxRun( modelADE2)
sumADE2    <- summary( fitADE2 )
get_table_from_fitADE2(fitADE2)
(SA2=fitADE2$MZ$VA$values)
(SD2=fitADE2$MZ$VD$values)
(SE2=fitADE2$MZ$VE$values)
SPh2=SA2+SD2+SE2
print(SA2/SPh2,4)
print(SD2/SPh2,4)
print(SE2/SPh2,4)
#
#
#  -------------------------------------------------------------------- saturated model
#
selVars = c("inattcm71","zprs1","inattcm72","zprs2")  # the array with the variable names
#tmpSm = corFiml(data_W7_7_MZ[,selVars[1:3]], covar = TRUE)$cov
#tmpSd = corFiml(data_W7_7_DZ[,selVars[1:4]], covar = TRUE)$cov
tmpSm = cov(data_W7_7_MZ[,selVars[1:4]],use='complete')
tmpSd = cov(data_W7_7_DZ[,selVars[1:4]],use='complete')
tmpm =  ( apply(data_W7_7_MZ[,selVars],2,mean, na.rm=T) )
tmpRm =round( cov2cor(tmpSm),2)
tmpRm[4,1]=tmpRm[1,4]=tmpRm[3,2]
tmpRm[4,2]=tmpRm[2,4]=tmpRm[3,1]
tmpRm[4,3]=tmpRm[3,4]=tmpRm[2,1]
tmpRd =round( cov2cor(tmpSd),2)
stsdm = sqrt((diag(tmpSm)))
stsdd = sqrt((diag(tmpSd)))
stsdm = (stsdm[1:2] + stsdm[3:4])/2
stsdm = round(c(stsdm, stsdm),3)
stsdd = (stsdd[1:2] + stsdd[3:4])/2
stsdd = round(c(stsdd, stsdd),3)
#
#
#
svb0=c(tmpm[1:2])
svb1=c(.0,.0) # sex
svb2=c(.0,.0) # age
#
#
ntv=2*2
nv=2
# Create regression model for expected Mean Matrices
#
B0_     <- mxMatrix( type="Full", nrow=1, ncol=nv, free=TRUE, values=svb0, labels=c("b0ph","b0prs"), name="b0_" )
B1_sex     <- mxMatrix( type="Full", nrow=1, ncol=nv, free=c(T,F), values=svb1, labels=c("b1ph","b1prs"), name="b1sex" )
B1_age     <- mxMatrix( type="Full", nrow=1, ncol=nv, free=c(T,F), values=svb2, labels=c("b2ph","b2prs"), name="b1age" )
#
Sex1 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.sex1','data.sex1'),name="sex1")
Age1 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.agem71','data.agem71'),name="age1")
Sex2 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.sex2','data.sex2'),name="sex2")
Age2 <- mxMatrix(type="Full", nrow=1, ncol=nv, free=FALSE, labels=c('data.agem72','data.agem72'),name="age2")
#
ExpMeanDZ <- mxAlgebra(expression=cbind(b0_ + b1sex*sex1 + b1age*age1, b0_ + b1sex*sex2 + b1age*age2), name='expMeanDZ')
ExpMeanMZ <- mxAlgebra(expression=cbind(b0_ + b1sex*sex1 + b1age*age1, b0_ + b1sex*sex2 + b1age*age2)[1,1:3], name='expMeanMZ')
#
#SAT model
#
#SAT model
# Create Matrices for Variance Components
SDm      <- mxMatrix( type="Diag", nrow=ntv, ncol=ntv, free=T, values=stsdm, labels=c("sdphm","sdpm","sdphm","sdpm"), name="sdm" )
SDd      <- mxMatrix( type="Diag", nrow=ntv, ncol=ntv, free=T, values=stsdd, labels=c("sdphd","sdpd","sdphd","sdpd"), name="sdd" )
#
Rm      <- mxMatrix( type="Stand", nrow=ntv, ncol=ntv, free=c(T), values=tmpRm, label=c("r21m","r31m","r32m","r32m","r31m","r21m"), name="RM" )
Rd      <- mxMatrix( type="Stand", nrow=ntv, ncol=ntv, free=c(T), values=tmpRd, label=c("r21d","r31d","r41d","r32d","r42d","r43d"), name="RD" )
#
#SAT model
# Create Algebra for expected Variance/Covariance Matrices in MZ & DZ twins
expCovMZ  <- mxAlgebra( expression= (sdm%*%RM%*%t(sdm))[1:3,1:3], name="expCovMZ" )
expCovDZ  <- mxAlgebra( expression= sdd%*%RD%*%t(sdd), name="expCovDZ" )
#SAT model
# Create Data Objects for Multiple Groups
#SAT model
dataMZ    <- mxData( observed=data_W7_7_MZ, type="raw" )
dataDZ    <- mxData( observed=data_W7_7_DZ, type="raw" )
#SAT model
# Create Expectation Objects for Multiple Groups
expMZ     <- mxExpectationNormal( covariance="expCovMZ", means="expMeanMZ", dimnames=selVars[c(1,2,3)] )
expDZ     <- mxExpectationNormal( covariance="expCovDZ", means="expMeanDZ", dimnames=selVars )
funML     <- mxFitFunctionML()
#SAT model
pars      <- list(B0_, B1_age, B1_sex, SDm, SDd, Rm, Rd )
modelMZ   <- mxModel( pars, ExpMeanMZ,  Sex1, Sex2, Age1, Age2, expCovMZ, dataMZ, expMZ, funML, name="MZ" )
modelDZ   <- mxModel( pars, ExpMeanDZ,  Sex1, Sex2, Age1, Age2, expCovDZ, dataDZ, expDZ, funML, name="DZ" )
multi     <- mxFitFunctionMultigroup( c("MZ","DZ") )
#SAT model
# Build Model with Confidence Intervals
modelSAT2  <- mxModel(name='SAT', pars, modelMZ, modelDZ, multi) #  dataMZ, dataDZ, multi)
#SAT model
# ----------------------------------------------------------------------------------------------------------------------
# RUN MODEL
# conor
# Run SAT Model
# fitSAT2    <- mxTryHard( modelSAT2, 20)
fitSAT2    <- mxRun( modelSAT2)
sumSAT2    <- summary( fitSAT2 )
#
mxCompare(fitSAT2,fitADE2)
fitSAT2
sumSAT2
generate_beta_data <- function(mean, var, n = 1000) {
alpha <- mean * (mean * (1 - mean) / var - 1)
beta <- (1 - mean) * (mean * (1 - mean) / var)
rbeta(n, alpha, beta)
}
means <- c(0.2, 0.5, 0.8)
variances <- c(0.01, 0.05, 0.1)
data <- data.frame()
for (mean in means) {
for (var in variances) {
values <- generate_beta_data(mean, var)
temp <- data.frame(value = values, mean = paste0("mean=", mean), var = paste0("var=", var))
data <- rbind(data, temp)
}
}
ggplot(data, aes(x = value, fill = var)) +
geom_density(alpha = 0.6) +
facet_wrap(~mean, scales = "free_y") +
labs(title = "Beta Distribution for Different Mean and Variance Values",
x = "Value", y = "Density") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = value, fill = var)) +
geom_density(alpha = 0.6) +
facet_wrap(~mean, scales = "free_y") +
labs(title = "Beta Distribution for Different Mean and Variance Values",
x = "Value", y = "Density") +
theme_minimal()
setwd("D:\Onedrive\PhD\ESLM-cpp\data_analysis")
setwd("D:\\Onedrive\PhD\ESLM-cpp\data_analysis")
setwd("D:/Onedrive/PhD/ESLM-cpp/data_analysis")
data_1 <- read.csv("payoffs_0_1000.csv")
data_1 <- read.csv("./../data/payoffs_0_1000.csv")
View(data)
View(data_1)
data_1 <- read.csv("./../data/payoffs_0_1000.csv", header = F)
View(data_1)
seq(1000, 5000, 1000)
expand.grid(assortment = 0:2, seed = seq(1000, 5000, 1000))
runs <- expand.grid(assortment = 0:2, seed = seq(1000, 5000, 1000))
payoffs <- map2_dfr(runs$assortment, runs$seed, function(assortment, seed) {
read.csv(paste0("./../data/payoffs_", assortment, "_", seed, ".csv"), header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
mutate(assortment = assortment, seed = seed)
})
library(purrr)
runs <- expand.grid(assortment = 0:2, seed = seq(1000, 5000, 1000))
payoffs <- map2_dfr(runs$assortment, runs$seed, function(assortment, seed) {
read.csv(paste0("./../data/payoffs_", assortment, "_", seed, ".csv"), header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
mutate(assortment = assortment, seed = seed)
})
library(tidyverse)
payoffs <- map2_dfr(runs$assortment, runs$seed, function(assortment, seed) {
read.csv(paste0("./../data/payoffs_", assortment, "_", seed, ".csv"), header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
mutate(assortment = assortment, seed = seed)
})
payoffs$assortment <- factor(payoffs$assortment,
levels = 0:2,
labels = c("Age-based", "Random-Dynamic", "Random-Static"))
View(payoffs)
payoffs <- payoffs %>%
mutate(assortment = factor(assortment, levels = 0:2, labels = c("Age-based", "Random-Dynamic", "Random-Static")),
time = as.numeric(sub("V", "", time)))
View(payoffs)
payoffs <- map2_dfr(runs$assortment, runs$seed, function(assortment, seed) {
read.csv(paste0("./../data/payoffs_", assortment, "_", seed, ".csv"), header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
mutate(assortment = assortment, seed = seed)
})
View(payoffs)
payoffs <- payoffs %>%
mutate(assortment = factor(assortment, levels = 0:2, labels = c("Age-based", "Random-Dynamic", "Random-Static")),
time = as.numeric(sub("V", "", time)))
View(payoffs)
library(ggplot2)
average_payoffs <- payoffs %>%
filter(time %in% time_range) %>%
group_by(assortment, time) %>%
summarise(mean_payoff = mean(payoff), .groups = "drop")
time_range <- 1:1000
average_payoffs <- payoffs %>%
filter(time %in% time_range) %>%
group_by(assortment, time) %>%
summarise(mean_payoff = mean(payoff), .groups = "drop")
ggplot(average_payoffs, aes(x = time, y = average_payoff, color = assortment)) +
geom_line() +
labs(title = "Average Payoff Over Time",
x = "Time",
y = "Average Payoff") +
theme_minimal()
ggplot(average_payoffs, aes(x = time, y = mean_payoff, color = assortment)) +
geom_line() +
labs(title = "Average Payoff Over Time",
x = "Time",
y = "Average Payoff") +
theme_minimal()
ggplot(average_payoffs, aes(x = assortment, y = mean_payoff, fill = assortment)) +
geom_bar(stat = "identity") +
labs(title = "Average Payoff Across Time Range",
x = "Assortment",
y = "Average Payoff") +
theme_minimal()
average_payoffs <- payoffs %>%
filter(time %in% time_range) %>%
group_by(assortment, time) %>%
summarise(mean_payoff = mean(payoff), .groups = "drop")
ggplot(average_payoffs, aes(x = time, y = mean_payoff, color = assortment)) +
geom_line() +
labs(title = "Average Payoff Over Time",
x = "Time",
y = "Average Payoff") +
theme_minimal()
ggplot(average_payoffs, aes(x = time, y = mean_payoff, color = assortment)) +
geom_line(alpha=0.5) +
labs(title = "Average Payoff Over Time",
x = "Time",
y = "Average Payoff") +
theme_minimal()
ggplot(average_payoffs, aes(x = time, y = mean_payoff, color = assortment)) +
geom_line() +
labs(title = "Average Payoff Over Time",
x = "Time",
y = "Average Payoff") +
theme_minimal()
ggplot(average_payoffs, aes(x = assortment, y = mean_payoff, fill = assortment)) +
geom_bar(stat = "identity", alpha = 0.7) +  # stat="identity" to use actual data values
labs(title = "Average Payoff by Assortment",
x = "Assortment",
y = "Average Payoff") +
theme_minimal()
expand.grid(
t = 1000,
num_nodes = 16,
n = 100,
m = 10,
edge_mean = 0.5,
edge_var = 0.05,
edge_threshold = 0.3,
payoffs_mean = 0.5,
competences_sd = 0.05,
node_mean = 0.5,
node_var = 0.05,
agent_edge_sd = 0.05,
cor_age_competence = 0.5,
experience_bias = 0.0,
assortment = 0:2, # need to replace with appropriate value or range
strategy = 0:1  # need to replace with appropriate value or range
)
parameter_space <- expand.grid(
seed = seq(1000, 5000, 1000),
t = 1000,
num_nodes = 16,
n = 100,
m = 10,
edge_mean = 0.5,
edge_var = 0.05,
edge_threshold = 0.3,
payoffs_mean = 0.5,
competences_sd = 0.05,
node_mean = 0.5,
node_var = 0.05,
agent_edge_sd = 0.05,
cor_age_competence = 0.5,
experience_bias = 0.5,
assortment = 0:2,
strategy = 0:1
)
construct_command <- function(params) {
exec <- "../build/main.exe"
args <- paste(params, collapse = " ")
paste(exec, args)
}
num_cores <- ifelse(parallel::detectCores() > 1, parallel::detectCores() - 1, 1)
parallel::mclapply(1:num_simulations, function(i) {
params <- parameter_space[i, ]
command <- construct_command(params)
system(command)
}, mc.cores = num_cores)
cl <- parallel::makeCluster(num_cores)
parallel::clusterExport(cl, c("parameter_space", "construct_command"))
parallel::parLapply(cl, 1:nrow(parameter_space), function(i) {
params <- parameter_space[i, ]
command <- construct_command(params)
system(command)
})
parallel::stopCluster(cl)
View(parameter_space)
construct_command(parameter_space[17, ])
construct_command(parameter_space[15, ])
parameter_space <- expand.grid(
seed = seq(1000, 5000, 1000),
t = 1000,
num_nodes = 16,
n = 100,
m = 10,
edge_mean = 0.5,
edge_var = 0.05,
edge_threshold = 0.3,
payoffs_mean = 0.5,
competences_sd = 0.05,
node_mean = 0.5,
node_var = 0.05,
agent_edge_sd = 0.05,
cor_age_competence = 0.5,
experience_bias = 0.5,
assortment = 0:2,
strategy = 0:1
)
construct_command <- function(params) {
exec <- "../build/main.exe"
args <- paste(params, collapse = " ")
paste(exec, args)
}
num_cores <- ifelse(parallel::detectCores() > 1, parallel::detectCores() - 1, 1)
cl <- parallel::makeCluster(num_cores)
parallel::clusterExport(cl, c("parameter_space", "construct_command"))
parallel::parLapply(cl, 1:nrow(parameter_space), function(i) {
params <- parameter_space[i, ]
command <- construct_command(params)
system(command)
})
parallel::stopCluster(cl)
payoffs <- purrr::pmap_dfr(parameter_space, function(...) {
params <- list(...)
filename <- paste0("./../data/payoffs_", paste(params, collapse = "_"), ".csv")
read.csv(filename, header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
bind_cols(params)
})
getwd()
t1 <- read.csv(./../data/payoffs_1000_0.05_0_0.05_0.5_0.5_0.3_0.05_0.5_10_100_0.5_0.05_16_0.5_0_1000.csv)
t1 <- read.csv(./../data/payoffs_1000_0.05_0_0.05_0.5_0.5_0.3_0.05_0.5_10_100_0.5_0.05_16_0.5_0_1000.csv)
payoffs <- purrr::pmap_dfr(parameter_space, function(...) {
params <- list(...)
filename <- paste0("../data/payoffs_", paste(params, collapse = "_"), ".csv")
print(filename)
read.csv(filename, header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
bind_cols(params)
})
cl <- parallel::makeCluster(num_cores)
cl <- parallel::makeCluster(num_cores)
parallel::clusterExport(cl, c("parameter_space", "construct_command"))
parallel::parLapply(cl, 1:nrow(parameter_space), function(i) {
params <- parameter_space[i, ]
command <- construct_command(params)
system(command)
})
parallel::stopCluster(cl)
payoffs <- purrr::pmap_dfr(parameter_space, function(...) {
params <- list(...)
filename <- paste0("../data/payoffs_", paste(params, collapse = "_"), ".csv")
print(filename)
read.csv(filename, header = F) %>%
rownames_to_column(var = "ID") %>%
pivot_longer(-ID, names_to = "time", values_to = "payoff") %>%
bind_cols(params)
})
View(payoffs)
payoffs <- payoffs %>%
mutate(assortment = factor(assortment, levels = 0:2, labels = c("Age-based", "Random-Dynamic", "Random-Static")),
strategy = factor(strategy, levels = 0:1, labels = c("Random", "Payoff-Based")),
time = as.numeric(sub("V", "", time)))
View(payoffs)
time_range <- 1:1000
aggregate_data <- payoffs %>%
group_by(assortment, strategy) %>%
summarise(mean_payoff = mean(payoff, na.rm = TRUE))
ggplot(aggregate_data, aes(x = assortment, y = mean_payoff, fill = strategy)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Mean Payoffs by Assortment and Strategy", x = "Assortment", y = "Mean Payoff") +
theme_minimal()
payoffs_means <- payoffs %>%
group_by(time, assortment, strategy) %>%
summarise(mean_payoff = mean(payoff, na.rm = TRUE), .groups = 'drop')
ggplot(payoffs_means, aes(x = time, y = mean_payoff, color = strategy, linetype = assortment)) +
geom_line() +
labs(x = "Time", y = "Mean Payoff", color = "Strategy", linetype = "Assortment") +
theme_minimal()
